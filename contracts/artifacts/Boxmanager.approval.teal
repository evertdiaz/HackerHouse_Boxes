#pragma version 9

// This TEAL was generated by TEALScript v0.59.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// boxCreate(string,pay)void
abi_route_boxCreate:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// data: string
	txna ApplicationArgs 1
	extract 2 0

	// MBRPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute boxCreate(string,pay)void
	callsub boxCreate
	int 1
	return

boxCreate:
	proto 3 0

	// contracts/boxManager.algo.ts:8
	// assert(!this.myBox(this.txn.sender).exists)
	txn Sender
	box_len
	swap
	pop
	!
	assert

	// contracts/boxManager.algo.ts:10
	// preBoxMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preBoxMBR: uint64

	// contracts/boxManager.algo.ts:11
	// this.myBox(this.txn.sender).value = data
	txn Sender
	dup
	box_del
	pop
	frame_dig -2 // data: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/boxManager.algo.ts:13
	// verifyTxn(MBRPayment, {
	//       receiver: this.app.address,
	//       amount: this.app.address.minBalance - preBoxMBR,
	//     })
	// verify receiver
	frame_dig -1 // MBRPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // MBRPayment: pay
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preBoxMBR: uint64
	-
	==
	assert
	retsub

// getBoxData()string
abi_route_getBoxData:
	// execute getBoxData()string
	callsub getBoxData
	int 1
	return

getBoxData:
	proto 0 0

	// contracts/boxManager.algo.ts:20
	// return this.myBox(this.txn.sender).value;
	txn Sender
	box_get
	assert
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// boxUpdate(string,pay)void
abi_route_boxUpdate:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// data: string
	txna ApplicationArgs 1
	extract 2 0

	// MBRPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute boxUpdate(string,pay)void
	callsub boxUpdate
	int 1
	return

boxUpdate:
	proto 4 0

	// contracts/boxManager.algo.ts:24
	// assert(this.myBox(this.txn.sender).exists)
	txn Sender
	box_len
	swap
	pop
	assert

	// contracts/boxManager.algo.ts:25
	// preBoxMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preBoxMBR: uint64

	// contracts/boxManager.algo.ts:26
	// this.myBox(this.txn.sender).value = data
	txn Sender
	dup
	box_del
	pop
	frame_dig -2 // data: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/boxManager.algo.ts:27
	// balanceDiff =
	//       this.app.address.minBalance - preBoxMBR < 0
	//         ? preBoxMBR - this.app.address.minBalance
	//         : this.app.address.minBalance - preBoxMBR
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preBoxMBR: uint64
	-
	int 0
	<
	bz ternary1_false
	frame_dig -3 // preBoxMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	b ternary1_end

ternary1_false:
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preBoxMBR: uint64
	-

ternary1_end:
	frame_bury -4 // balanceDiff: uint64

	// contracts/boxManager.algo.ts:32
	// verifyTxn(MBRPayment, {
	//       receiver: this.app.address,
	//       amount: balanceDiff,
	//     })
	// verify receiver
	frame_dig -1 // MBRPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // MBRPayment: pay
	gtxns Amount
	frame_dig -4 // balanceDiff: uint64
	==
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "boxCreate(pay,string)void"
	method "getBoxData()string"
	method "boxUpdate(pay,string)void"
	txna ApplicationArgs 0
	match abi_route_boxCreate abi_route_getBoxData abi_route_boxUpdate
	err