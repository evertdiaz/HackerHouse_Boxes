#pragma version 9

// This TEAL was generated by TEALScript v0.59.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createTupleBox(string,string,pay)void
abi_route_createTupleBox:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// MBRPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute createTupleBox(string,string,pay)void
	callsub createTupleBox
	int 1
	return

createTupleBox:
	proto 4 0

	// contracts/boxTupleManager.algo.ts:10
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -2 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -3 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // contact: Contact

	// contracts/boxTupleManager.algo.ts:11
	// this.contacts(this.txn.sender).value = contact
	txn Sender
	dup
	box_del
	pop
	frame_dig -4 // contact: Contact
	box_put
	retsub

// updateTupleField(string,string)void
abi_route_updateTupleField:
	// value: string
	txna ApplicationArgs 2
	extract 2 0

	// field: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateTupleField(string,string)void
	callsub updateTupleField
	int 1
	return

updateTupleField:
	proto 2 0

	// if0_condition
	// contracts/boxTupleManager.algo.ts:15
	// field === 'name'
	frame_dig -1 // field: bytes
	byte 0x6e616d65 // "name"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// contracts/boxTupleManager.algo.ts:16
	// this.contacts(this.txn.sender).value.name = value
	txn Sender
	box_get
	assert
	store 0 // full array
	int 0
	dup
	store 4 // element head offset
	load 0 // full array
	load 0 // full array
	uncover 2
	extract_uint16
	dup
	store 1 // element start
	dup // duplicate start of element
	load 0 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 2 // element length
	load 0 // full array
	int 0
	load 1 // element start
	substring3
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 3 // new element
	load 0 // full array
	load 1 // element start
	load 2 // element length
	+ // get end of Element
	load 0 // full array
	len
	substring3
	concat
	concat
	store 0 // full array
	callsub get_length_difference
	load 5 // length difference
	load 4 // element head offset
	int 2
	+ // head ofset
	callsub update_dynamic_head
	load 0 // full array
	txn Sender
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_elseif1_condition:
	// contracts/boxTupleManager.algo.ts:17
	// field === 'company'
	frame_dig -1 // field: bytes
	byte 0x636f6d70616e79 // "company"
	==
	bz if0_else

	// if0_elseif1_consequent
	// contracts/boxTupleManager.algo.ts:18
	// this.contacts(this.txn.sender).value.company = value
	txn Sender
	box_get
	assert
	store 0 // full array
	int 2
	dup
	store 4 // element head offset
	load 0 // full array
	load 0 // full array
	uncover 2
	extract_uint16
	dup
	store 1 // element start
	dup // duplicate start of element
	load 0 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	store 2 // element length
	load 0 // full array
	int 0
	load 1 // element start
	substring3
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 3 // new element
	load 0 // full array
	load 1 // element start
	load 2 // element length
	+ // get end of Element
	load 0 // full array
	len
	substring3
	concat
	concat
	store 0 // full array
	callsub get_length_difference
	load 0 // full array
	txn Sender
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	err // 'Invalid field'

if0_end:
	retsub

// getTupleBoxData()(string,string)
abi_route_getTupleBoxData:
	// execute getTupleBoxData()(string,string)
	callsub getTupleBoxData
	int 1
	return

getTupleBoxData:
	proto 0 0

	// contracts/boxTupleManager.algo.ts:23
	// return this.contacts(this.txn.sender).value;
	txn Sender
	box_get
	assert
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "createTupleBox(pay,string,string)void"
	method "updateTupleField(string,string)void"
	method "getTupleBoxData()(string,string)"
	txna ApplicationArgs 0
	match abi_route_createTupleBox abi_route_updateTupleField abi_route_getTupleBoxData
	err

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 0 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 7 // subtract head difference
	bz subtract_head_difference
	+ // add difference to offset
	b end_calc_new_head

subtract_head_difference:
	swap
	- // subtract difference from offet

end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 0 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 0 // full array
	retsub

get_length_difference:
	load 3 // new element
	len // length of new element
	load 2 // element length
	<
	bnz swapped_difference
	load 3 // new element
	len // length of new element
	load 2 // element length
	int 1
	store 7 // subtract head difference
	b get_difference

swapped_difference:
	load 2 // element length
	load 3 // new element
	len // length of new element
	int 0
	store 7 // subtract head difference

get_difference:
	- // get length difference
	store 5 // length difference
	retsub